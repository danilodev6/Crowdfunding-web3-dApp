"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb_dist_esm_transaction_actions_encode_js"],{

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/encode.js":
/*!**********************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/transaction/actions/encode.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   getDataFromTx: () => (/* binding */ getDataFromTx),\n/* harmony export */   getExtraCallDataFromTx: () => (/* binding */ getExtraCallDataFromTx)\n/* harmony export */ });\nconst encodeWeakMap = new WeakMap();\n/**\n * Encodes a transaction object into a hexadecimal string representation of the encoded data.\n * @param transaction - The transaction object to encode.\n * @returns A promise that resolves to the encoded data as a hexadecimal string.\n * @transaction\n * @example\n * ```ts\n * import { encode } from \"thirdweb\";\n * const encodedData = await encode(transaction);\n * ```\n */\nasync function encode(transaction) {\n    if (encodeWeakMap.has(transaction)) {\n        // biome-ignore lint/style/noNonNullAssertion: the `has` above ensures that this will always be set\n        return encodeWeakMap.get(transaction);\n    }\n    const promise = (async () => {\n        const [data, extraData, { concatHex }] = await Promise.all([\n            getDataFromTx(transaction),\n            getExtraCallDataFromTx(transaction),\n            __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb_dist_esm_utils_encoding_helpers_concat-hex_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../utils/encoding/helpers/concat-hex.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/encoding/helpers/concat-hex.js\")),\n        ]);\n        if (extraData) {\n            return concatHex([data, extraData]);\n        }\n        return data;\n    })();\n    encodeWeakMap.set(transaction, promise);\n    return promise;\n}\n/**\n * Get the transaction.data (from a PreparedTransaction)\n * If the transaction does not have `data`, we default to \"0x\"\n * @internal\n */\nasync function getDataFromTx(transaction) {\n    if (transaction.data === undefined) {\n        return \"0x\";\n    }\n    if (typeof transaction.data === \"function\") {\n        const data = await transaction.data();\n        if (!data) {\n            return \"0x\";\n        }\n        return data;\n    }\n    return transaction.data;\n}\n/**\n * Get the extraCallData from a PreparedTransaction\n * @internal\n * If extraCallData is \"0x\", we will return `undefined`\n * to simplify the code, since concatenating \"0x\" doesn't do anything\n */\nasync function getExtraCallDataFromTx(transaction) {\n    if (!transaction.extraCallData) {\n        return undefined;\n    }\n    if (typeof transaction.extraCallData === \"function\") {\n        const extraData = await transaction.extraCallData();\n        if (!extraData)\n            return undefined;\n        if (!extraData.startsWith(\"0x\")) {\n            throw Error(\"Invalid extra calldata - must be a hex string\");\n        }\n        if (extraData === \"0x\") {\n            return undefined;\n        }\n        return extraData;\n    }\n    if (!transaction.extraCallData.startsWith(\"0x\")) {\n        throw Error(\"Invalid extra calldata - must be a hex string\");\n    }\n    return transaction.extraCallData;\n}\n//# sourceMappingURL=encode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS90cmFuc2FjdGlvbi9hY3Rpb25zL2VuY29kZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxXQUFXO0FBQzdDO0FBQ0E7QUFDQSxZQUFZLGtVQUFvRDtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvZGFuaWxvL0RldmVsb3Blci9FTlYvQmxvY2tjaGFpbi93ZWIzcHJvamVjdHMvd2ViM2NmL3dlYjNjZmFwcC9ub2RlX21vZHVsZXMvdGhpcmR3ZWIvZGlzdC9lc20vdHJhbnNhY3Rpb24vYWN0aW9ucy9lbmNvZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZW5jb2RlV2Vha01hcCA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIEVuY29kZXMgYSB0cmFuc2FjdGlvbiBvYmplY3QgaW50byBhIGhleGFkZWNpbWFsIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZW5jb2RlZCBkYXRhLlxuICogQHBhcmFtIHRyYW5zYWN0aW9uIC0gVGhlIHRyYW5zYWN0aW9uIG9iamVjdCB0byBlbmNvZGUuXG4gKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgZW5jb2RlZCBkYXRhIGFzIGEgaGV4YWRlY2ltYWwgc3RyaW5nLlxuICogQHRyYW5zYWN0aW9uXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IGVuY29kZSB9IGZyb20gXCJ0aGlyZHdlYlwiO1xuICogY29uc3QgZW5jb2RlZERhdGEgPSBhd2FpdCBlbmNvZGUodHJhbnNhY3Rpb24pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBlbmNvZGUodHJhbnNhY3Rpb24pIHtcbiAgICBpZiAoZW5jb2RlV2Vha01hcC5oYXModHJhbnNhY3Rpb24pKSB7XG4gICAgICAgIC8vIGJpb21lLWlnbm9yZSBsaW50L3N0eWxlL25vTm9uTnVsbEFzc2VydGlvbjogdGhlIGBoYXNgIGFib3ZlIGVuc3VyZXMgdGhhdCB0aGlzIHdpbGwgYWx3YXlzIGJlIHNldFxuICAgICAgICByZXR1cm4gZW5jb2RlV2Vha01hcC5nZXQodHJhbnNhY3Rpb24pO1xuICAgIH1cbiAgICBjb25zdCBwcm9taXNlID0gKGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgW2RhdGEsIGV4dHJhRGF0YSwgeyBjb25jYXRIZXggfV0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICBnZXREYXRhRnJvbVR4KHRyYW5zYWN0aW9uKSxcbiAgICAgICAgICAgIGdldEV4dHJhQ2FsbERhdGFGcm9tVHgodHJhbnNhY3Rpb24pLFxuICAgICAgICAgICAgaW1wb3J0KFwiLi4vLi4vdXRpbHMvZW5jb2RpbmcvaGVscGVycy9jb25jYXQtaGV4LmpzXCIpLFxuICAgICAgICBdKTtcbiAgICAgICAgaWYgKGV4dHJhRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbmNhdEhleChbZGF0YSwgZXh0cmFEYXRhXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSkoKTtcbiAgICBlbmNvZGVXZWFrTWFwLnNldCh0cmFuc2FjdGlvbiwgcHJvbWlzZSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG4vKipcbiAqIEdldCB0aGUgdHJhbnNhY3Rpb24uZGF0YSAoZnJvbSBhIFByZXBhcmVkVHJhbnNhY3Rpb24pXG4gKiBJZiB0aGUgdHJhbnNhY3Rpb24gZG9lcyBub3QgaGF2ZSBgZGF0YWAsIHdlIGRlZmF1bHQgdG8gXCIweFwiXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldERhdGFGcm9tVHgodHJhbnNhY3Rpb24pIHtcbiAgICBpZiAodHJhbnNhY3Rpb24uZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBcIjB4XCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdHJhbnNhY3Rpb24uZGF0YSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0cmFuc2FjdGlvbi5kYXRhKCk7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiMHhcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLmRhdGE7XG59XG4vKipcbiAqIEdldCB0aGUgZXh0cmFDYWxsRGF0YSBmcm9tIGEgUHJlcGFyZWRUcmFuc2FjdGlvblxuICogQGludGVybmFsXG4gKiBJZiBleHRyYUNhbGxEYXRhIGlzIFwiMHhcIiwgd2Ugd2lsbCByZXR1cm4gYHVuZGVmaW5lZGBcbiAqIHRvIHNpbXBsaWZ5IHRoZSBjb2RlLCBzaW5jZSBjb25jYXRlbmF0aW5nIFwiMHhcIiBkb2Vzbid0IGRvIGFueXRoaW5nXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRFeHRyYUNhbGxEYXRhRnJvbVR4KHRyYW5zYWN0aW9uKSB7XG4gICAgaWYgKCF0cmFuc2FjdGlvbi5leHRyYUNhbGxEYXRhKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdHJhbnNhY3Rpb24uZXh0cmFDYWxsRGF0YSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNvbnN0IGV4dHJhRGF0YSA9IGF3YWl0IHRyYW5zYWN0aW9uLmV4dHJhQ2FsbERhdGEoKTtcbiAgICAgICAgaWYgKCFleHRyYURhdGEpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoIWV4dHJhRGF0YS5zdGFydHNXaXRoKFwiMHhcIikpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiSW52YWxpZCBleHRyYSBjYWxsZGF0YSAtIG11c3QgYmUgYSBoZXggc3RyaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHRyYURhdGEgPT09IFwiMHhcIikge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXh0cmFEYXRhO1xuICAgIH1cbiAgICBpZiAoIXRyYW5zYWN0aW9uLmV4dHJhQ2FsbERhdGEuc3RhcnRzV2l0aChcIjB4XCIpKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwiSW52YWxpZCBleHRyYSBjYWxsZGF0YSAtIG11c3QgYmUgYSBoZXggc3RyaW5nXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNhY3Rpb24uZXh0cmFDYWxsRGF0YTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuY29kZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/encode.js\n"));

/***/ })

}]);