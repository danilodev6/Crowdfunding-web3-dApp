"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb_dist_esm_transaction_actions_gasless_providers_engine_js"],{

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/engine.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/engine.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prepareEngineTransaction: () => (/* binding */ prepareEngineTransaction),\n/* harmony export */   relayEngineTransaction: () => (/* binding */ relayEngineTransaction)\n/* harmony export */ });\n/* harmony import */ var _contract_contract_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../contract/contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/contract/contract.js\");\n/* harmony import */ var _utils_json_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../utils/json.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/json.js\");\n/* harmony import */ var _read_contract_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../read-contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/read-contract.js\");\n/* harmony import */ var _wait_for_tx_receipt_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../wait-for-tx-receipt.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/wait-for-tx-receipt.js\");\n\n\n\n\n/**\n * @internal - only exported for testing\n */\nasync function prepareEngineTransaction({ account, serializableTransaction, transaction, gasless, }) {\n    const forrwaderContract = (0,_contract_contract_js__WEBPACK_IMPORTED_MODULE_0__.getContract)({\n        address: gasless.relayerForwarderAddress,\n        chain: transaction.chain,\n        client: transaction.client,\n    });\n    const nonce = await (0,_read_contract_js__WEBPACK_IMPORTED_MODULE_1__.readContract)({\n        contract: forrwaderContract,\n        method: \"function getNonce(address) view returns (uint256)\",\n        params: [account.address],\n    });\n    const [signature, message] = await (async () => {\n        // TODO: handle special case for `approve` -> `permit` transactions\n        if (!serializableTransaction.to) {\n            throw new Error(\"engine transactions must have a 'to' address\");\n        }\n        if (!serializableTransaction.gas) {\n            throw new Error(\"engine transactions must have a 'gas' value\");\n        }\n        if (!serializableTransaction.data) {\n            throw new Error(\"engine transactions must have a 'data' value\");\n        }\n        // chainless support!\n        if (gasless.experimentalChainlessSupport) {\n            const message = {\n                chainid: BigInt(transaction.chain.id),\n                data: serializableTransaction.data,\n                from: account.address,\n                gas: serializableTransaction.gas,\n                nonce: nonce,\n                to: serializableTransaction.to,\n                value: 0n,\n            };\n            return [\n                await account.signTypedData({\n                    domain: {\n                        name: \"GSNv2 Forwarder\",\n                        verifyingContract: forrwaderContract.address,\n                        version: \"0.0.1\",\n                    },\n                    message,\n                    primaryType: \"ForwardRequest\",\n                    types: { ForwardRequest: ChainAwareForwardRequest },\n                }),\n                message,\n            ];\n        }\n        // else non-chainless support\n        const message = {\n            data: serializableTransaction.data,\n            from: account.address,\n            gas: serializableTransaction.gas,\n            nonce: nonce,\n            to: serializableTransaction.to,\n            value: 0n,\n        };\n        return [\n            await account.signTypedData({\n                domain: {\n                    chainId: transaction.chain.id,\n                    name: gasless.domainName ?? \"GSNv2 Forwarder\",\n                    verifyingContract: forrwaderContract.address,\n                    version: gasless.domainVersion ?? \"0.0.1\",\n                },\n                message,\n                primaryType: \"ForwardRequest\",\n                types: { ForwardRequest },\n            }),\n            message,\n        ];\n    })();\n    // TODO: handle special case for `approve` -> `permit`\n    const messageType = \"forward\";\n    return { message, messageType, signature };\n}\nconst ForwardRequest = [\n    { name: \"from\", type: \"address\" },\n    { name: \"to\", type: \"address\" },\n    { name: \"value\", type: \"uint256\" },\n    { name: \"gas\", type: \"uint256\" },\n    { name: \"nonce\", type: \"uint256\" },\n    { name: \"data\", type: \"bytes\" },\n];\nconst ChainAwareForwardRequest = [\n    { name: \"from\", type: \"address\" },\n    { name: \"to\", type: \"address\" },\n    { name: \"value\", type: \"uint256\" },\n    { name: \"gas\", type: \"uint256\" },\n    { name: \"nonce\", type: \"uint256\" },\n    { name: \"data\", type: \"bytes\" },\n    { name: \"chainid\", type: \"uint256\" },\n];\n/**\n * @internal\n */\nasync function relayEngineTransaction(options) {\n    const { message, messageType, signature } = await prepareEngineTransaction(options);\n    const response = await fetch(options.gasless.relayerUrl, {\n        body: (0,_utils_json_js__WEBPACK_IMPORTED_MODULE_2__.stringify)({\n            forwarderAddress: options.gasless.relayerForwarderAddress,\n            request: message,\n            signature,\n            type: messageType,\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        method: \"POST\",\n    });\n    if (!response.ok) {\n        throw new Error(`Failed to send transaction: ${await response.text()}`);\n    }\n    const json = await response.json();\n    if (!json.result) {\n        throw new Error(`Relay transaction failed: ${json.message}`);\n    }\n    const queueId = json.result.queueId;\n    // poll for transactionHash\n    const timeout = 60000;\n    const interval = 1000;\n    const endtime = Date.now() + timeout;\n    while (Date.now() < endtime) {\n        const receipt = await fetchReceipt({ options, queueId });\n        if (receipt) {\n            return {\n                chain: options.transaction.chain,\n                client: options.transaction.client,\n                transactionHash: receipt.transactionHash,\n            };\n        }\n        await new Promise((resolve) => setTimeout(resolve, interval));\n    }\n    throw new Error(`Failed to find relayed transaction after ${timeout}ms`);\n}\nasync function fetchReceipt(args) {\n    const { options, queueId } = args;\n    const url = options.gasless.relayerUrl.split(\"/relayer/\")[0];\n    const res = await fetch(`${url}/transaction/status/${queueId}`, {\n        method: \"GET\",\n    });\n    const resJson = await res.json();\n    if (!res.ok) {\n        return null;\n    }\n    const result = resJson.result;\n    if (!result) {\n        return null;\n    }\n    switch (result.status) {\n        case \"errored\":\n            throw new Error(`Transaction errored with reason: ${result.errorMessage}`);\n        case \"cancelled\":\n            throw new Error(\"Transaction execution cancelled.\");\n        case \"mined\": {\n            const receipt = await (0,_wait_for_tx_receipt_js__WEBPACK_IMPORTED_MODULE_3__.waitForReceipt)({\n                chain: options.transaction.chain,\n                client: options.transaction.client,\n                transactionHash: result.transactionHash,\n            });\n            return receipt;\n        }\n        default: {\n            return null;\n        }\n    }\n}\n//# sourceMappingURL=engine.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/engine.js\n"));

/***/ })

}]);